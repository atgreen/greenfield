#!/bin/sh

# SKIP_IDM=1

. /home/green/greenfield/.config

CONFIG_LIBRARY=`(cd $CONFIG_LIBRARY; pwd)`
GF_RHELDVD=$CONFIG_LIBRARY/rhel-server-7.1-x86_64-dvd.iso
GF_MANIFEST=$CONFIG_LIBRARY/$CONFIG_MANIFEST
GF_UNDERCLOUD_IMAGES="$CONFIG_LIBRARY/deploy-ramdisk-ironic-7.0.0-32.tar $CONFIG_LIBRARY/discovery-ramdisk-7.0.0-32.tar $CONFIG_LIBRARY/overcloud-full-7.0.0-32.tar"
IMAGEDIR=/mnt/red/images

# === Utility Functions and Internal Variables =========================

# Generate random MAC addresses that start with 52:00:

function generate_MAC_address() {
  SOURCE=`dd if=/dev/urandom count=1 2>/dev/null | openssl dgst -md5`
  eval "$1='52:00:$(echo ${SOURCE} | sed 's/^............\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')'"
}

# Split domain like example.com into example and com.
DNAM=`echo $CONFIG_DOMAIN | awk -F. '{ print $1 }'`
DTLD=`echo $CONFIG_DOMAIN | awk -F. '{ print $2 }'`

# === Host system work =================================================

# Mount the RHEL DVD under /mnt, or similar.
sudo mount -o loop -t iso9660 $GF_RHELDVD $CONFIG_MOUNTPOINT

# === IdM ==============================================================

HOSTNAME=idm.$CONFIG_DOMAIN

# if test ${SKIP_IDM+set} = "set"; then

DNS_OPTIONS=
if test ${CONFIG_DNS_FORWARDER+set} = "set"; then
  DNS_OPTIONS="--setup-dns --no-forwarders"
else
  DNS_OPTIONS="--setup-dns --forwarder=$CONFIG_DNS_FORWARDER"
fi

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

cat > dev.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.99 \
 --gateway=10.0.0.1 \
 --netmask=255.255.255.0 --nameserver=10.0.0.99 \
 --hostname=idm.$CONFIG_DOMAIN \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
#network --bootproto dhcp \
# --hostname=idm.$CONFIG_DOMAIN \
# --noipv6 \
# --device=$ETH1_MAC
rootpw $CONFIG_ROOT_PASSWORD
# IPA needs a number of ports open.  See the documentation for details.
#firewall --enabled --ssh --port=80:tcp,443:tcp,389:tcp,636:tcp,88:tcp,88:udp,464:tcp,464:udp,53:tcp,53:udp,7389:tcp
firewall --disabled
#selinux --enforcing
selinux --permissive
timezone --utc $CONFIG_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart --type=btrfs
%packages
@core
ipa-server
bind
bind-dyndb-ldap
emacs
%end

%post --log=/root/post_install_1.log
# Force this host info the hosts file.
echo "10.0.0.99  idm.$CONFIG_DOMAIN" >> /etc/hosts

# Fix networking...
echo "nameserver 10.0.0.99" > /etc/resolv.conf
hostname idm.$CONFIG_DOMAIN
echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1

cat > /etc/yum.repos.d/greenfield.repo <<END
[rhel-7-server-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-rpms
enable=1
gpgcheck=0
nsslverify=0
END

yum -y update

cat > /etc/systemd/system/install-idm.service <<END
[Unit]
Description=One-shot service to install IdM
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/sbin/ipa-server-install -r ${CONFIG_DOMAIN^^} --hostname=idm.$CONFIG_DOMAIN -p $CONFIG_ADMIN_PASSWORD -a $CONFIG_ADMIN_PASSWORD $DNS_OPTIONS -n $CONFIG_DOMAIN --ssh-trust-dns -U 
TimeoutStartSec=0
ExecStartPost=/usr/bin/systemctl disable install-idm.service

[Install]
WantedBy=default.target
END

systemctl enable ntpd.service
systemctl enable install-idm.service

tar cvfz /root/tmp.tar.gz /tmp
tar cvfz /root/log.tar.gz /var/log

%end
EOF

virt-install \
    --disk $GF_RHELDVD,device=cdrom \
    --name idm.$CONFIG_DOMAIN --ram 4096 \
    --os-variant=rhel7 \
    --rng=/dev/random \
    --disk $IMAGEDIR/$HOSTNAME.img,format=qcow2,size=16 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $CONFIG_MOUNTPOINT -x "ks=file:/dev.ks" \
    --initrd-inject=dev.ks --force \
    --noautoconsole --wait=-1

echo "Waiting for IdM to install..."

until $(curl --output /dev/null --silent --head -k --fail https://10.0.0.99); do printf '.'; sleep 5; done

# fi

# === OpenStack ========================================================

HOSTNAME=undercloud.$CONFIG_DOMAIN

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

rm -rf imageiso
mkdir imageiso
for i in $GF_UNDERCLOUD_IMAGES; do
  (cd imageiso; tar xvf $i);
done;
cp $CONFIG_LIBRARY/undercloud.conf imageiso
(cd imageiso; 
    genisoimage -input-charset utf-8 -output undercloud.iso -volid cidata -joliet -rock *)

cat > dev.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.96 \
 --gateway=10.0.0.1 \
 --netmask=255.255.255.0 --nameserver=10.0.0.99 \
 --hostname=$HOSTNAME \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
rootpw $CONFIG_ROOT_PASSWORD
firewall --disabled
selinux --permissive
timezone --utc $CONFIG_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart --type=btrfs
%packages
@core
ipa-client
emacs
%end

%post --log=/root/post_install_1.log
# Force this host info the hosts file.
echo "10.1.0.2   undercloud.$CONFIG_DOMAIN undercloud" >> /etc/hosts
echo "10.1.0.3   undercloud.$CONFIG_DOMAIN undercloud" >> /etc/hosts
echo "10.0.0.96  undercloud.$CONFIG_DOMAIN undercloud" >> /etc/hosts

# Fix networking...
echo "nameserver 10.0.0.99" > /etc/resolv.conf
hostname undercloud.$CONFIG_DOMAIN
echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1

# Disable the TTY requirement for sudo.  This messes
# with the undercloud installer, the way we run it.
# FIXME: we can turn it back on after installation if we like.
sed -ri 's/Defaults.*requiretty/#Defaults   requiretty/' /etc/sudoers

cat > /etc/systemd/system/install-undercloud.service <<END
[Unit]
Description=One-shot service to install OpenShift
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/su - root -c /root/install.sh
TimeoutStartSec=0
ExecStartPost=/usr/bin/systemctl disable install-undercloud.service

[Install]
WantedBy=default.target
END

cat > /etc/yum.repos.d/greenfield.repo <<END
[rhel-7-server-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-extras-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-extras-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-optional-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-optional-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-openstack-7.0-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-openstack-7.0-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-openstack-7.0-director-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-openstack-7.0-director-rpms
enable=1
gpgcheck=0
nsslverify=0
END

useradd stack
echo "stack:$CONFIG_ADMIN_PASSWD" | chpasswd
echo "stack ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/stack
chmod 0440 /etc/sudoers.d/stack
echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf

yum update -y
yum install -y python-rdomanager-oscplugin

cat > /home/stack/install.sh <<END
cd ~
openstack undercloud install
END
chmod +x /home/stack/install.sh

cat > /root/install.sh <<END
#!/bin/sh
set -x

sleep 5

# OSP Undercloud host preparation instructions here:
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_OpenStack_Platform/7/html/Director_Installation_and_Usage/chap-Installing_the_Undercloud.html
/usr/sbin/ipa-client-install -U -p admin -w $CONFIG_ADMIN_PASSWORD
mkdir ~stack/images
mkdir ~stack/templates
mount /dev/sr1 /mnt
cp /mnt/* ~stack/images
umount /mnt
mv ~stack/images/undercloud.conf ~stack/.
openssl genrsa -out privkey.pem 2048
openssl req -new -x509 -key privkey.pem -out cacert.pem -days 365 -subj "/C=CA/ST=Ontario/L=Toronto/O=Greenfield/OU=Lab/CN=undercloud.$CONFIG_DOMAIN"
cat cacert.pem privkey.pem > ~stack/undercloud.pem
chown -R stack:stack ~stack/*
mkdir /etc/pki/instack-certs
cp ~stack/undercloud.pem /etc/pki/instack-certs/.
semanage fcontect haproxy_exec_t /etc/pki/instack-certs/*
restorecon -R /etc/pki/instack-certs
/usr/bin/su - stack -c /home/stack/install.sh > stack.log 2>&1
END
chmod +x /root/install.sh

systemctl enable install-undercloud.service

tar cvfz /root/tmp.tar.gz /tmp
tar cvfz /root/log.tar.gz /var/log

%end
EOF

virt-install \
    --disk $GF_RHELDVD,device=cdrom \
    --disk imageiso/undercloud.iso,device=cdrom \
    --name undercloud.$CONFIG_DOMAIN --ram 4096 \
    --os-variant=rhel7 \
    --rng=/dev/random \
    --disk $IMAGEDIR/$HOSTNAME.img,format=qcow2,size=16 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $CONFIG_MOUNTPOINT -x "ks=file:/dev.ks" \
    --initrd-inject=dev.ks --force \
    --noautoconsole --wait=-1

# echo "Waiting for the OpenStack Undercloud to install..."

# until $(curl --output /dev/null --silent --head -k --fail https://10.0.0.97); do printf '.'; sleep 5; done

# === OpenShift ========================================================

HOSTNAME=ose.$CONFIG_DOMAIN

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

cat > dev.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.97 \
 --gateway=10.0.0.1 \
 --netmask=255.255.255.0 --nameserver=10.0.0.99 \
 --hostname=$HOSTNAME \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
rootpw $CONFIG_ROOT_PASSWORD
firewall --disabled
selinux --permissive
timezone --utc $CONFIG_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart --type=btrfs
%packages
@core
ipa-client
emacs
%end

%post --log=/root/post_install_1.log
# Force this host info the hosts file.
echo "10.0.0.97  ose.$CONFIG_DOMAIN" >> /etc/hosts

# Fix networking...
echo "nameserver 10.0.0.99" > /etc/resolv.conf
hostname ose.$CONFIG_DOMAIN
echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1

if [ -n $CONFIG_YUM_UPDATE ]; then yum -y update; fi

cat > /etc/sysconfig/docker-storage-setup <<END
DEVS=/dev/vdb
VG=docker-vg
END

cat > /etc/systemd/system/install-ose.service <<END
[Unit]
Description=One-shot service to install OpenShift
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/su - root -c /root/install.sh
TimeoutStartSec=0
ExecStartPost=/usr/bin/systemctl disable install-ose.service

[Install]
WantedBy=default.target
END

cat > /etc/yum.repos.d/greenfield.repo <<END
[rhel-7-server-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-extras-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-extras-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-optional-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-optional-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-ose-3.0-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-ose-3.0-rpms
enable=1
gpgcheck=0
nsslverify=0
END

cat > /root/install.sh <<END
#!/bin/sh
set -x

sleep 5

# OSE host preparation instructions here:
# https://access.redhat.com/documentation/en/openshift-enterprise/version-3.0/openshift-enterprise-30-administrator-guide#host-preparation

/usr/sbin/ipa-client-install -U -p admin -w $CONFIG_ADMIN_PASSWORD
yum remove -y NetworkManager
yum install -y wget git net-tools bind-utils iptables-services bridge-utils
yum install -y gcc python-virtualenv
yum update -y
yum install -y docker
docker-storage-setup
systemctl stop docker
rm -rf /var/lib/docker/*
systemctl restart docker
END

chmod +x /root/install.sh

systemctl enable install-ose.service

tar cvfz /root/tmp.tar.gz /tmp
tar cvfz /root/log.tar.gz /var/log

%end
EOF

virt-install \
    --disk $GF_RHELDVD,device=cdrom \
    --name ose.$CONFIG_DOMAIN --ram 4096 \
    --os-variant=rhel7 \
    --rng=/dev/random \
    --disk $IMAGEDIR/$HOSTNAME.img,format=qcow2,size=16 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $CONFIG_MOUNTPOINT -x "ks=file:/dev.ks" \
    --initrd-inject=dev.ks --force \
    --noautoconsole --wait=-1

# echo "Waiting for OSE to install..."

# until $(curl --output /dev/null --silent --head -k --fail https://10.0.0.97); do printf '.'; sleep 5; done

# === Satellite ========================================================

HOSTNAME=satellite.$CONFIG_DOMAIN

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

rm -rf manifestiso
mkdir manifestiso
cp $GF_MANIFEST manifestiso
(cd manifestiso; 
    genisoimage -input-charset utf-8 -output manifest.iso -volid cidata -joliet -rock $CONFIG_MANIFEST)

cat > dev.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.98 \
 --gateway=10.0.0.1 \
 --netmask=255.255.255.0 --nameserver=10.0.0.99 \
 --hostname=$HOSTNAME \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
rootpw $CONFIG_ROOT_PASSWORD
# IPA needs a number of ports open.  See the documentation for details.
#firewall --enabled --ssh --port=80:tcp,443:tcp,389:tcp,636:tcp,88:tcp,88:udp,464:tcp,464:udp,53:tcp,53:udp,7389:tcp
firewall --disabled
selinux --permissive
timezone --utc $CONFIG_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart --type=btrfs
%packages
@core
ipa-client
emacs
%end

%post --log=/root/post_install_1.log
# Force this host info the hosts file.
echo "10.0.0.98  satellite.$CONFIG_DOMAIN satellite" >> /etc/hosts

# Fix networking...
echo "nameserver 10.0.0.99" > /etc/resolv.conf
hostname satellite.$CONFIG_DOMAIN
echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1

cat > /etc/yum.repos.d/greenfield.repo <<END
[rhel-7-server-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-satellite-6.1-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-satellite-6.1-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-7-server-extras-rpms]
baseurl=http://10.0.0.1/repos/rhel-7-server-extras-rpms
enable=1
gpgcheck=0
nsslverify=0
[rhel-server-rhscl-7-rpms]
baseurl=http://10.0.0.1/repos/rhel-server-rhscl-7-rpms
enable=1
gpgcheck=0
nsslverify=0
END

yum update -y
yum install -y katello foreman-proxy ipa-admintools

cat > /root/install.sh <<END
#!/bin/sh
set -x
mkdir /mnt/rhel
mkdir /mnt/manifest
mount /dev/sr0 /mnt/rhel
mount /dev/sr1 /mnt/manifest

/usr/sbin/ipa-client-install -U -p admin -w $CONFIG_ADMIN_PASSWORD

katello-installer -v \
  --foreman-admin-username admin \
  --foreman-admin-password $CONFIG_ADMIN_PASSWORD \
  --capsule-dhcp true \
  --capsule-dhcp-interface ksdev0 \
  --capsule-dhcp-range "10.0.0.100 10.0.0.255" \
  --capsule-dhcp-gateway 10.0.0.1 \
  --capsule-dhcp-nameservers 10.0.0.99 \
  --capsule-tftp true \
  --capsule-tftp-servername $(hostname) \
  --capsule-puppet true \
  --capsule-puppetca true

hammer organization create --name=Greenfield --label=Greenfield
hammer organization add-user --user=admin --name=Greenfield
hammer location create --name=Laptop
hammer location add-user --user=admin --name=Laptop 
hammer location add-organization --name=Laptop --organization=Greenfield
hammer organization delete --name=Default_Organization
hammer location delete --name=Default_Location
hammer organization add-smart-proxy --name=Greenfield --smart-proxy-id=1
hammer location add-smart-proxy --name=Laptop --smart-proxy-id=1
hammer domain create --name='$CONFIG_DOMAIN'
hammer subnet create --domain-ids=1 --gateway=10.0.0.1 --mask='255.255.255.0' --name='10.0.0.0/24' --tftp-id=1 --network='10.0.0.0' --dns-primary='10.0.0.99'
hammer organization add-subnet --subnet-id=1 --name='Greenfield'
hammer organization add-domain --domain-id=1 --name='Greenfield'
hammer location add-subnet --subnet-id=1 --name='Laptop'
hammer location add-domain --domain-id=1 --name='Laptop'
hammer subscription upload --file /mnt/manifest/$CONFIG_MANIFEST --organization=Greenfield
hammer repository-set enable --organization Greenfield --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server (RPMs)'
hammer repository-set enable --organization Greenfield --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'RHN Tools for Red Hat Enterprise Linux 7 Server (RPMs)'
hammer repository-set enable --organization Greenfield --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server (Kickstart)'
for i in \$(hammer --csv repository list --organization=Greenfield  | awk -F, {'print \$1'} | grep -vi '^ID'); do hammer repository synchronize --id \${i} --organization=Greenfield --async; done
hammer lifecycle-environment create --name='Dev' --prior='Library' --organization=Greenfield
hammer lifecycle-environment create --name='QA' --prior='Dev' --organization=Greenfield
hammer lifecycle-environment create --name='Prod' --prior='QA' --organization=Greenfield
hammer content-view create --name='rhel-7-server-x86_64-cv' --organization=Greenfield
for i in \$(hammer --csv repository list --organization=Greenfield | awk -F, {'print \$1'} | grep -vi '^ID'); do hammer content-view add-repository --name='rhel-7-server-x86_64-cv' --organization=Greenfield --repository-id=\${i}; done
hammer content-view publish --name="rhel-7-server-x86_64-cv" --organization=Greenfield --async

# Configure Satellite for IdM Realm Support
# https://access.redhat.com/documentation/en-US/Red_Hat_Satellite/6.0/html/User_Guide/Configuring_Identity_Management_in_Red_Hat_Satellite.html

echo $CONFIG_ADMIN_PASSWORD | foreman-prepare-realm admin realm-capsule
mv /root/freeipa.keytab /etc/foreman-proxy
chown foreman-proxy:foreman-proxy /etc/foreman-proxy/freeipa.keytab
katello-installer --capsule-realm true \
  --capsule-realm-keytab /etc/foreman-proxy/freeipa.keytab \
  --capsule-realm-principal 'realm-capsule@${CONFIG_DOMAIN^^}' \
  --capsule-realm-provider freeipa
cp /etc/ipa/ca.crt /etc/pki/ca-trust/source/anchors/ipa.crt
update-ca-trust enable
update-ca-trust
service foreman-proxy-restart
# FIXME: use hammer to create the realm
END

chmod +x /root/install.sh

mkdir /root/.hammer
cat > /root/.hammer/cli_config.yml <<END
:foreman:
    :host: 'https://localhost'
    :username: 'admin'
    :password: '$CONFIG_ADMIN_PASSWORD'
END

cat > /etc/yum.repos.d/local.repo <<END
[local]
name=Local
baseurl=file:///mnt/rhel
enabled=1
gpgcheck=0
END

cat > /etc/systemd/system/install-satellite.service <<END
[Unit]
Description=One-shot service to install Satellite
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/su - root -c /root/install.sh
TimeoutStartSec=0
ExecStartPost=/usr/bin/systemctl disable install-satellite.service

[Install]
WantedBy=default.target
END

systemctl enable install-satellite.service

tar cvfz /root/tmp.tar.gz /tmp
tar cvfz /root/log.tar.gz /var/log

%end
EOF

virt-install \
    --disk $GF_RHELDVD,device=cdrom \
    --disk manifestiso/manifest.iso,device=cdrom \
    --name satellite.$CONFIG_DOMAIN --ram 4096 \
    --os-variant=rhel7 \
    --rng=/dev/random \
    --disk $IMAGEDIR/$HOSTNAME.img,format=qcow2,size=400 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $CONFIG_MOUNTPOINT -x "ks=file:/dev.ks" \
    --initrd-inject=dev.ks --force \
    --noautoconsole --wait=-1

echo "Waiting for Satellite to install..."

until $(curl --output /dev/null --silent --head -k --fail https://10.0.0.98); do printf '.'; sleep 5; done

echo "All done!"

